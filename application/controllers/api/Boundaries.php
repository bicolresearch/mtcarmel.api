<?php

use Restserver\Libraries\REST_Controller;

defined('BASEPATH') OR exit('No direct script access allowed');

/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/Format.php';

class Boundaries extends REST_Controller
{
    private $id = '';

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->id = (int)$this->get('id');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['boundaries_get']['limit'] = 500; // 500 requests per hour per boundaries/key
        $this->methods['boundary_get']['limit'] = 500; // 500 requests per hour per boundary/key
        $this->methods['boundary_post']['limit'] = 100; // 100 requests per hour per boundary/key
        $this->methods['boundary_delete']['limit'] = 50; // 50 requests per hour per boundary/key
    }

    public function boundaries_get()
    {
        // Posts from a data store e.g. database
        $boundaries = $this->boundaries_model->_get_all();

        $id = $this->uri->segment(4);

        // If the id parameter doesn't exist return all the boundaries
        if ($id === NULL) {
            // Check if the boundaries data store contains boundaries (in case the database result returns NULL)
            if (!empty($boundaries)) {
                // Set the response and exit
                $this->response($boundaries, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            } else {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No boundaries were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        } else {
            // Invalid id, set the response and exit.
            $this->response([
                'status' => FALSE,
                'message' => 'Bad Request'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
    }

    public function boundary_get()
    {
        // Find and return a single record for a particular boundary.
        $id = $this->id;

        // Validate the id.
        if ($id <= 0) {
            // Invalid id, set the response and exit.
            $this->response([
                'status' => FALSE,
                'message' => 'Bad Request'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the boundary from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.
        $boundary = $this->boundaries_model->_get_by_id($id);

        if (!empty($boundary)) {
            $this->set_response($boundary, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Boundary could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function boundary_post()
    {
        // $this->some_model->update_boundary( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function boundary_delete()
    {
        $id = (int)$this->get('id');

        // Validate the id.
        if ($id <= 0) {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }
}

/* End of file: Posts.php */
/* Location: application/controller/api/Posts.php */